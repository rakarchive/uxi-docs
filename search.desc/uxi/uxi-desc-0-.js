searchState.loadedDescShard("uxi", 0, "uxi is a package used to build UXI protocol compliant game …\nAn Array Flag takes a constant amount of arguments.\nA Boolean Flag takes no arguments.\nBundle is a packet containing all the relevant context …\nA BundledCtx bundles the user-provided context <code>C</code> and the …\nCheck represents a checkbox parameter which can be true or …\nClient represents an UXI engine client. It can accept and …\nCmdResult is the Result type returned by a run function. …\nCombo represents a combo box which can have the value of …\nCommand represents a runnable UXI command. It contains all …\nContains the error value\nError represents a recoverable error, report and continue …\nFatal represents an unrecoverable error, report and quit …\nFlag is the schema for a single flag of a Command. It …\nContains the success value\nA Parameter is the schema for one of the Client’s …\nQuit directs the Client to quit itself, without reporting …\nRunError is the error type returned when running a …\n<code>RunFn&lt;C&gt;</code> represents the run function of a Command. This …\nA Single Flag takes a single argument.\nSpin represents a spin wheel which can be an integer in a …\nString represents a string parameter which can have any …\nA Variadic Flags takes all the remaining arguments.\nauthor sets the name of the author of the Client’s …\ncollect returns the number of arguments that should be …\ncommand adds the given Command to the given Client. After …\nengine sets the name of the engine for the Client.\n<code>error!()</code> resolves to a <code>Err(~RunError::Error)</code> kind of …\n<code>error!()</code> resolves to a <code>Err(~RunError::Error)</code> kind of …\n<code>fatal!()</code> resolves to a <code>Err(~RunError::Fatal)</code> kind of …\n<code>fatal!()</code> resolves to a <code>Err(~RunError::Fatal)</code> kind of …\nflag adds the given Flag to the Command’s Flag schema.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>From&lt;E&gt;</code> is implemented on RunError for all errors, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget_single_flag gets the value provided to an array or a …\nget_check_option returns the value of a check option with …\nget_single_flag gets the value provided to a single flag …\nget_spin_option returns the value of a spin option with …\nget_string_option returns the value of a combo/string …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nis_flag_set checks if a flag with the given name was …\nlock locks the internal mutex of the Bundle and returns a …\nnew creates a new Client. The Client can be configured …\nnew creates a new Command with the given run function.\noption adds the given option to the given Client. This will\nparallelize sets if the Command to be run in a separate …\nprotocol returns the last protocol command which was …\nprotocol configures the Client to support the given UXI …\n<code>quit!()</code> resolves to a <code>Err(~RunError::Quit)</code> kind of error, …\n<code>quit!()</code> resolves to a <code>Err(~RunError::Quit)</code> kind of error, …\nrun_cmd_strings allows running a Command independently …\nshould_quit checks if the current error requires the …\nstart starts the Client so that it can now accept Commands …")