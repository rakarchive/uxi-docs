searchState.loadedDescShard("tetka_games", 0, "perft is a function to walk the move generation tree of …\nColor represents all the possible colors that an ataxx …\nAn iterator over the variants of Color\nPiece represents all the possible ataxx pieces.\nAn iterator over the variants of ColoredPiece\nFile represents a file on the Ataxx Board. Each vertical …\nAn iterator over the variants of File\nMove represents an Ataxx move which can be played on the …\nNULL Move represents an invalid move.\nPASS Move represents a no move, where only the side to …\nPiece represents the types of pieces in ataxx, namely …\nAn iterator over the variants of Piece\nPosition represents the snapshot of an Ataxx Board, the …\nPositionParseErr represents an error encountered while …\nRank represents a rank on the Ataxx Board. Each horizontal …\nAn iterator over the variants of Rank\nSquare represents all the squares present on an Ataxx …\nAn iterator over the variants of Square\nafter_move returns a new Position which occurs when the …\nat returns the Piece of the piece present on the given …\nbitboards stores BitBoards for the piece configuration of …\nReturns the union of <code>self</code> and <code>rhs</code> as a new BitBoard.\nchecksum stores the semi-unique Hash of the current …\ncount_moves returns the number of legal moves in the …\ndouble returns the targets of a jump Move from the given …\nDisplay formats the given Move in a human-readable manner. …\nDebug formats the given Move into a human-readable debug …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nfrom_str converts the given string representation of a …\ngenerate_moves_into generates all the legal moves in the …\nhalf-move clock stores the number of half-moves since the …\nput puts the given piece represented by its Piece on the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nis_game_over checks if the game is over, i.e. is a win or …\nis_single checks if the given Move is singular in nature. …\nnew returns a new jump Move from the given source Square …\nnew_single returns a new singular Move, where a piece is …\nnext pops the next Square from the BitBoard and returns it.\nReturns the complementary BitBoard of <code>self</code>.\nnot implements the not unary operator (!) which switches …\nside_to_move stores the piece whose turn to move it …\nsingle returns the targets of a singular Move from the …\nSource returns the source Square of the moving piece. This …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new BitBoard.\nReturns the BitBoard obtained on removing <code>rhs</code> from <code>self</code>.\nTarget returns the target Square of the moving piece.\nwinner returns the Piece which has won the game. It …\nThe type for the bitboards used by this board …\nBitBoardType is a generalized interface implemented by …\nColor is the color representation for the game.\nThe type for the pieces (with color) used by this board …\nThe ColoredPiece trait should be implemented by the piece …\nEMPTY is an empty Self containing no Squares.\nHash represents the semi-unique checksum of a Position …\nMAX_IN_GAME is a suitably high maximum for the number of …\nMAX_IN_POSITION is a suitably high maximum for the number …\nThe type for one move in this board representation.\nMoveList is a basic implementation of <code>MoveStore</code> that is …\nMoveStore is a trait implemented by types which are able …\nThe Move trait should be implemented the move …\nN is the number of specializations of the enum.\nNULL represents the null or the ‘do nothing’ move.\nPiece is the piece representation for the game.\nPositionParseErr represents an error encountered while …\nPosition is a generalized interface for board …\nRepresentableType is a basic trait which is implemented by …\nSquareType is the trait implemented by the type for …\nUNIVERSE is a filled Self containing all Squares.\nZERO represents the zero value of Hash.\nafter_move returns the position after playing the given …\nat returns the piece that is in the given square.\nClears the BitBoard, removing all elements.\nClears the BitBoard, removing all elements.\ncolor returns the Color part of the given ColoredPiece.\nReturns <code>true</code> if the BitBoard contains a value.\nReturns <code>true</code> if the BitBoard contains a value.\ncount_moves is similar to generate_moves, except instead …\ncount_moves is similar to generate_moves, except instead …\neast returns a new Self with all the squares shifted to …\neast returns a new Self with all the squares shifted to …\nReturns the square to the east of self. If there is no …\nReturns the square to the east of self. If there is no …\nReturns a BitBoard containing all the squares from the …\nReturns a BitBoard containing all the squares from the …\nReturns the File of self.\nReturns the File of self.\nDisplay allows Hash to be formatted in a human-readable …\nDebug allows Hash to be formatted in a human-readable form.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngenerate_moves is similar to generate_moves_into, except …\ngenerate_moves is similar to generate_moves_into, except …\ngenerate_moves_into generates all the moves in the current …\ninsert puts the given piece at the given square. The …\nAdds <code>square</code> to the BitBoard.\nAdds <code>square</code> to the BitBoard.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in <code>common</code> with other. …\nReturns <code>true</code> if <code>self</code> has no elements in <code>common</code> with other. …\nReturns <code>true</code> if the BitBoard contains no elements.\nReturns <code>true</code> if the BitBoard contains no elements.\nis_empty checks if no Moves are stored in the MoveStore.\nis_empty checks if no Moves are stored in the MoveStore.\nis_game_over returns a boolean representing if the game is …\nis_game_over returns a boolean representing if the game is …\nReturns true if the BitBoard is a subset of another, i.e., …\nReturns true if the BitBoard is a subset of another, i.e., …\nReturns true if the BitBoard is a superset of another, …\nReturns true if the BitBoard is a superset of another, …\nlen returns the number of Moves stored in the MoveStore.\nReturns the number of elements in the BitBoard.\nReturns the number of elements in the BitBoard.\nget_lsb returns the least significant Self::Square from …\nget_lsb returns the least significant Self::Square from …\nget_msb returns the most significant Self::Square from the …\nget_msb returns the most significant Self::Square from the …\nMakes a new, empty <code>BitBoard</code>.\nMakes a new, empty <code>BitBoard</code>.\nnew creates a new ColoredPiece from the given Piece and …\nnew creates a new ColoredPiece from the given Piece and …\nnew creates a new Square from the given File and Rank.\nnew creates a new Square from the given File and Rank.\nnew creates a new Hash value from a raw u64.\nnorth returns a new Self with all the squares shifted to …\nnorth returns a new Self with all the squares shifted to …\nReturns the square to the north of self. If there is no …\nReturns the square to the north of self. If there is no …\nNot operator (!) switches the side to move for the Hash.\npiece returns the Piece part of the given ColoredPiece.\npop_lsb pops the least significant Self::Square from the …\npop_lsb pops the least significant Self::Square from the …\npop_msb pops the most significant Self::Square from the …\npop_msb pops the most significant Self::Square from the …\npush adds the given Move to the MoveStore.\nReturns a BitBoard containing all the squares from the …\nReturns a BitBoard containing all the squares from the …\nReturns the Rank of self.\nReturns the Rank of self.\nremove clears the given square, and returns the piece that …\nRemoves <code>square</code> from the BitBoard.\nRemoves <code>square</code> from the BitBoard.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate.\nsouth returns a new Self with all the squares shifted to …\nsouth returns a new Self with all the squares shifted to …\nReturns the square to the south of self. If there is no …\nReturns the square to the south of self. If there is no …\nunsafe_from unsafely converts the given number into Self.\nwest returns a new Self with all the squares shifted to …\nwest returns a new Self with all the squares shifted to …\nReturns the square to the west of self. If there is no …\nReturns the square to the west of self. If there is no …\nwinner returns the winning side in the current position.")