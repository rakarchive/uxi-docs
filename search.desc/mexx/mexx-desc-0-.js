searchState.loadedDescShard("mexx", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Param</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nlru implements a Least Recently Used cache for Nodes. This …\nCache is a Least Recently Used (LRU) Cache for Nodes, …\nEntry is one of the entries in the LRU Cache. Externally, …\nattach adds the given entry to the non-void list and makes …\ndetach removes the given entry from the cache, but keeps …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnew creates a new Cache with the given capacity for …\nConstructs a new <code>Entry</code>.\nnew_mib creates a new Cache with the given number of …\nnode returns a reference to the Entry at the given pointer.\nnode_mut returns a mutable reference to the Entry at the …\npromote makes the given Entry the most recently used one.\npush adds the given Node to the cache as its head.\nremove_lru purges the data of the Least Recently Used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Node</code>.\nConstructs a new <code>Edges</code>.\nConstructs a new <code>Edge</code>.")